# -*- coding: utf-8 -*-
"""McDonald's Menu Nutritional Analysis - Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CBsyHV3ZJw5VHb7_72KSOjwiKAYKEXpU

Installing and Import Necessary Libraries
"""

# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Optional: Set up matplotlib for better visual output
plt.style.use('seaborn')

"""Load the Dataset into Colab"""

# Load the dataset
import pandas as pd

df = pd.read_csv('Nutrical Dataset.csv')

# Display the first few rows of the dataset
df.head()

"""Data Preprocessing


*   Check for missing values.
*   Perform any data cleaning if necessary.



```
# This is formatted as code
```


"""

# Check for missing values
df.isnull().sum()

# If needed, drop missing values or fill them
df = df.dropna()

# Display dataset info and statistics
df.info()
df.describe()

"""Exploratory Data Analysis (EDA)"""

# Create a histogram to show the distribution of calories
plt.figure(figsize=(10, 6))
plt.hist(df['Calories'], bins=30, color='skyblue', edgecolor='black')
plt.title('Calorie Distribution Across Menu Items')
plt.xlabel('Calories')
plt.ylabel('Frequency')
plt.grid(True)
plt.tight_layout()
plt.show()

"""Nutrient Distribution (Fat, Protein, Carbohydrates)"""

# Create boxplots to compare nutrient distribution
nutrients = ['Total Fat', 'Protein', 'Carbohydrates']

plt.figure(figsize=(12, 8))
df[nutrients].boxplot()
plt.title('Nutrient Distribution Across Menu Items')
plt.ylabel('Grams')
plt.tight_layout()
plt.show()

"""Visualization of Insights

Top 10 High-Calorie Menu Items
"""

# Find the top 10 items with the highest calories
top_10_high_cal = df[['Item', 'Calories']].sort_values(by='Calories', ascending=False).head(10)

# Bar plot to visualize top 10 high-calorie items
plt.figure(figsize=(10, 6))
sns.barplot(x='Calories', y='Item', data=top_10_high_cal, palette='coolwarm')
plt.title('Top 10 High-Calorie Menu Items')
plt.xlabel('Calories')
plt.ylabel('Menu Item')
plt.tight_layout()
plt.show()

"""Nutritional Composition of Popular Menu Categories"""

# Assuming there is a 'Category' column in the dataset
category_avg_nutrition = df.groupby('Category')[['Calories', 'Total Fat', 'Protein', 'Carbohydrates']].mean()

# Plot a grouped bar chart to visualize average nutrients per category
category_avg_nutrition.plot(kind='bar', figsize=(12, 8), colormap='Set3')
plt.title('Average Nutritional Content by Menu Category')
plt.xlabel('Menu Category')
plt.ylabel('Average Nutritional Content (grams)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""Insights and Recommendations"""

# Calculate average calories across the menu
average_calories = df['Calories'].mean()

# Print general insights
print(f"The average calorie content across all menu items is: {average_calories:.2f} calories.")

# Identify the lowest calorie items
lowest_cal_items = df[['Item', 'Calories']].sort_values(by='Calories').head(5)
print("\nLowest Calorie Items:\n", lowest_cal_items)

# Identify the highest calorie items
highest_cal_items = df[['Item', 'Calories']].sort_values(by='Calories', ascending=False).head(5)
print("\nHighest Calorie Items:\n", highest_cal_items)

"""Save Visualizations and Insights"""

# Save the histogram of calorie distribution as an image
plt.figure(figsize=(10, 6))
plt.hist(df['Calories'], bins=30, color='skyblue', edgecolor='black')
plt.title('Calorie Distribution Across Menu Items')
plt.xlabel('Calories')
plt.ylabel('Frequency')
plt.grid(True)
plt.tight_layout()
plt.savefig('calorie_distribution.png')
plt.close()  # To prevent displaying the plot again

"""Export Visualizations for Reporting"""

# Save a figure to a file
plt.figure(figsize=(10, 6))
plt.hist(df['Calories'], bins=30, color='skyblue', edgecolor='black')
plt.title('Calorie Distribution Across Menu Items')
plt.xlabel('Calories')
plt.ylabel('Frequency')
plt.grid(True)
plt.tight_layout()
plt.savefig('calorie_distribution.png')  # Saves the figure to a PNG file
plt.close()  # To prevent displaying the plot again

